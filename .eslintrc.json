{
  "root": true,
  "ignorePatterns": [
    "projects/**/*",
    "node_modules/**/*",
    "dist/**/*",
    "coverage/**/*"
  ],
  "overrides": [
    {
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "project": "./tsconfig.json",
        "sourceType": "module"
      },
      "files": ["*.ts"],
      "plugins": [
        "@typescript-eslint",
        "typescript-sort-keys",
        "simple-import-sort",
        "import"
      ],
      "extends": [
        "eslint:all",
        "plugin:@typescript-eslint/recommended",
        "plugin:@angular-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates",
        "plugin:typescript-sort-keys/recommended",
        "prettier"
      ],
      "rules": {
        // disabled rules (required)
        "no-magic-numbers": "off", // This will wrongly detect a number passed to a function as a magic number
        "new-cap": "off", // The decorators will be wrongly detected
        "class-methods-use-this": "off", // some methods are not using this
        "require-await": "off", // it will wrongly detect async methods as not having await
        "max-params": "off", // some constructors need many parameters

        // disabled rules (optional, in personal preference)
        "no-console": "off", // This will disable console.log, console.error, etc. This could be removed if we have our own logger
        "one-var": "off", // in favor to not merge variables to one
        "no-continue": "off", // in favor to use continue

        // modified rules
        "func-style": ["error", "declaration", { "allowArrowFunctions": true }],

        // replaced rules
        "no-useless-constructor": "off",
        "@typescript-eslint/no-useless-constructor": "error",

        "no-shadow": "off",
        "@typescript-eslint/no-shadow": "error",

        "sort-imports": "off",
        "simple-import-sort/imports": "error",
        "simple-import-sort/exports": "error",
        "import/first": "error",
        "import/newline-after-import": "error",
        "import/no-duplicates": "error",

        // additional rules
        "@typescript-eslint/consistent-type-exports": "error",
        "@typescript-eslint/consistent-type-imports": [
          "error",
          {
            "fixStyle": "inline-type-imports"
          }
        ],

        "padding-line-between-statements": [
          "error",
          { "blankLine": "always", "prev": "*", "next": "return" },
          {
            "blankLine": "always",
            "prev": ["const", "let", "var", "multiline-expression"],
            "next": "*"
          },
          {
            "blankLine": "any",
            "prev": ["const", "let", "var"],
            "next": ["const", "let", "var"]
          }
        ],

        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "app",
            "style": "camelCase"
          }
        ],
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "app",
            "style": "kebab-case"
          }
        ]
      }
    },
    {
      "files": ["*.spec.ts"],
      "rules": {
        "init-declarations": "off",
        "max-lines-per-function": "off"
      }
    },
    {
      "files": ["*.html"],
      "extends": ["plugin:@angular-eslint/template/recommended"],
      "rules": {}
    },
    // NOTE: WE ARE NOT APPLYING @ANGULAR-ESLINT/TEMPLATE IN THIS OVERRIDE, ONLY PRETTIER
    {
      "files": ["*.html"],
      "excludedFiles": ["*inline-template-*.component.html"],
      "extends": ["plugin:prettier/recommended"],
      "rules": {
        // NOTE: WE ARE OVERRIDING THE DEFAULT CONFIG TO ALWAYS SET THE PARSER TO ANGULAR (SEE BELOW)
        "prettier/prettier": ["error", { "parser": "angular" }]
      }
    }
  ]
}
